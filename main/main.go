package main

import (
	"strings"
	"net/http"
	"fmt"
	"io/ioutil"
	"strconv"
)

func main() {

	postStuffResponse := callPostStuff()
	fmt.Printf("\nResponse to POST /stuff is as follows [ " + postStuffResponse + " ]")

	//expectedJson := "{\"this\":\"that-NEW\",\"arr\":[{\"a1\":2,\"b1\":\"bee one-UPDATED\"}]}"
	expectedJson := `{"this":"that-NEW","arr":[{"a1":2,"b1":"bee one-UPDATED"}]}`
	if postStuffResponse != expectedJson {
		fmt.Printf("\nPOST /stuff FAILED\n expected: %s\n got: %s",expectedJson,postStuffResponse)
	} else {
		fmt.Println("\nwhich is what was expected")
	}

	expectedGetStuffResponse := "from Get: here is some stuff"
	getStuffResponse := callGetStuff()
	fmt.Printf("\nResponse to GET /stuff is as follows [ " + getStuffResponse + " ]")
	if getStuffResponse != expectedGetStuffResponse {
		fmt.Printf("\nGET /stuff FAILED\n expected: %s\n got: %s",expectedGetStuffResponse,getStuffResponse)
	} else {
		fmt.Println("\nwhich is what was expected")
	}

	headerValue := "my very own header value"
	expectedGetPingResponse := "pong.  you sent " + headerValue
	getPingResponse := callGetPing(headerValue)
	fmt.Printf("\nResponse to GET /ping is as follows [ " + getPingResponse + " ]")
	if getPingResponse != expectedGetPingResponse {
		fmt.Printf("\nGET /ping FAILED\n expected: %s\n got: %s",expectedGetPingResponse,getPingResponse)
	} else {
		fmt.Println("\nwhich is what was expected")
	}


	userId := "most excellent user"
	expectedGetUsersResponse := "GET /users/{userId}: view user id " + userId
	getUsersResponse := callGetUsers(userId)
	fmt.Printf("\nResponse to GET /users/{userId} is as follows [ " + getUsersResponse + " ]")
	if getUsersResponse != expectedGetUsersResponse {
		fmt.Printf("\nGET /users/{userId} FAILED\n expected: %s\n got: %s",expectedGetUsersResponse,getUsersResponse)
	} else {
		fmt.Println("\nwhich is what was expected")
	}

	numericUserId := 12345
	expectedNumericGetUsersResponse := fmt.Sprintf("GET /users/{userId}: view user id %v", numericUserId)
	numericGetUsersResponse := callGetUsers(strconv.Itoa(numericUserId))
	fmt.Printf("\nResponse to GET /users/{userId} is as follows [ " + numericGetUsersResponse + " ]")
	if numericGetUsersResponse != expectedNumericGetUsersResponse {
		fmt.Printf("\nGET /users/{userId} FAILED\n expected: %s\n got: %s", expectedNumericGetUsersResponse, numericGetUsersResponse)
	} else {
		fmt.Println("\nwhich is what was expected")
	}

}

func callPostStuff() string {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	body := strings.NewReader(`{"this":"that","arr":[{"a1":1,"b1":"bee one"}]}`)
	req, err := http.NewRequest("POST", "http://localhost:3000/stuff", body)
	if err != nil {
		fmt.Printf("Error creating POST request")
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("Error calling POST /stuff")
	}
	defer resp.Body.Close()

	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	return string(responseBody)

}

func callGetStuff() string {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	resp, err := http.Get("http://localhost:3000/stuff")
	if err != nil {
		fmt.Printf("Error calling GET /stuff")
	}
	defer resp.Body.Close()

	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	return string(responseBody)


}

func callGetUsers(userId string) string {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	resp, err := http.Get("http://localhost:3000/users/" + userId)
	if err != nil {
		fmt.Printf("Error calling GET /users/" + userId)
	}
	defer resp.Body.Close()

	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	return string(responseBody)


}

func callGetPing(headerValue string) string {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	req, err := http.NewRequest("GET", "http://localhost:3000/ping", nil)
	if err != nil {
		fmt.Printf("Error getting request for GET /ping")
	}
	req.Header.Set("The-Header", headerValue)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("Error calling GET /ping")
	}
	defer resp.Body.Close()
	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}

	return string(responseBody)

}
